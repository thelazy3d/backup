[display]
##  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
##  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

# Display Data definition
[display_template _vheater_temperature]
param_heater: "extruder"
text:
  {% if param_heater in printer %}
    # Show glyph
    {% if param_heater == "heater_bed" %}
      {% if printer[param_heater].target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (printer[param_heater].temperature,) }
    # Optionally show target
    {% if printer[param_heater].target and (printer[param_heater].temperature - printer[param_heater].target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (printer[param_heater].target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display chamber]
position: 2, 0
text:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if 'chamber' in user.hw and user.hw.chamber.ena %}
	~chamber~
	{ "%3.0f" % printer["temperature_" + user.hw.chamber.type + " chamber"].temperature }
	~degrees~
  {% endif %}

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.print_stats.total_duration %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time|int != 0 %}
    {% set pos = printer.motion_report.live_position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.660 " }
	~voroninv~
  {% endif %}

# Macro definition

#  M300 [P<ms>] [S<Hz>]
#  P is the tone duration, S the tone frequency.
#  The frequency won't be pitch perfect.
#  Volume can be adjusted with VALUE. Maximum volume is VALUE=0.5 on the 12864.
[gcode_macro M300]
description: Set Beeper value
gcode:
  {% set freq = params.S|default(440)|float %}
  {% if freq != 0 %} SET_PIN PIN=_BEEPER VALUE=0.3 CYCLE_TIME={1/freq} {% endif %}
  G4 P{params.P|default(100)|int}
  SET_PIN PIN=_BEEPER VALUE=0
    
[delayed_gcode _DISPLAY_INIT]
gcode:
  {% if printer['gcode_macro _USER_VARIABLE'].hw.display.ena %} 
    _LCD_KNOB COLOR=GREEN SYNC=1
    UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  {% endif %}

[gcode_macro _LCD_KNOB]
description: Helper: Set LCD Knob color
variable_knob: {'act'    : {'pri':{'R':0.0, 'G':0.3, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'restore': {'pri':{'R':0.0, 'G':0.0, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'time'   : 0,
                'sync'   : 0}
variable_select: 1  ; used to select what neopixel is active while blinking
gcode:
  ##### color definition #####
  {% set color_dic = {'OFF'  :{'R':0.0, 'G':0.0, 'B':0.0},
                      'GREEN':{'R':0.0, 'G':0.3, 'B':0.0},
                      'RED'  :{'R':0.5, 'G':0.0, 'B':0.0},
                      'BLUE' :{'R':0.0, 'G':0.0, 'B':0.5}} %}
  ##### get PARAMETERS or use defaults values #####
  {% set _dummy = knob.update({'time': params.BLINK|default(0)|float}) %}
  {% set _dummy = knob.update({'sync': params.SYNC|default(0)|int}) %}
  {% if 'COLOR' in params|upper %}
    {% set color = params.COLOR|upper %}
    {% set _dummy = knob.restore.update({'pri':knob.act.pri}) %}
    {% if color in color_dic %}
      {% set _dummy = knob.act.update({'pri':color_dic[color]}) %}
    {% else %}
      {action_respond_info("LCD KNOB COLOR %s is not defined used default: GREEN" % color)}
      {% set _dummy = knob.act.update({'pri':color_dic.GREEN}) %}
    {% endif %}
  {% else %}
    {% set _dummy = knob.act.update({'pri':knob.restore.pri}) %}
  {% endif %}
  ##### store new variable values #####
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=knob VALUE="{knob}"
  ##### update to new color and start or stop blinking #####
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=2 TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=3 TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[delayed_gcode _BLINK_DELAY]
gcode:
  {% set knob = printer["gcode_macro _LCD_KNOB"].knob %}
  {% set i = [2,3] if printer["gcode_macro _LCD_KNOB"].select|int == 1 else [3,2] %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=select VALUE={(printer["gcode_macro _LCD_KNOB"].select|int * -1)}
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G} BLUE={knob.act.pri.B} INDEX={i[0]} TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=neo_display RED={knob.act.sec.R} GREEN={knob.act.sec.G} BLUE={knob.act.sec.B} INDEX={i[1]} TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if state == 'on' %} _DISPLAY_OFF {% else %} _DISPLAY_ON {% endif %}
  _DISPLAY_STATE
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode: {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  {% if not printer.menu.running and printer['gcode_macro _USER_VARIABLE'].hw.display.ena %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  {% if printer['gcode_macro _USER_VARIABLE'].hw.display.ena %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
    SET_LED LED=neo_display RED=0.8 GREEN=0.8 BLUE=1.0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[delayed_gcode _DELAY_DISPLAY_OFF]
gcode: _DISPLAY_OFF